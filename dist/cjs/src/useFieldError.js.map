{"version":3,"file":"useFieldError.js","sourceRoot":"","sources":["../../../src/useFieldError.ts"],"names":[],"mappings":";;;AAAA,mCAA0C;AAC1C,yDAAsD;AAEtD;;GAEG;AACH,SAAgB,aAAa,CAAC,IAAY;IACxC,MAAM,IAAI,GAAG,IAAA,yBAAgB,GAAE,CAAC;IAEhC,MAAM,CAAC,EAAE,KAAK,EAAE,EAAE,EAAE,OAAO,EAAE,KAAK,EAAE,YAAY,EAAE,CAAC,GAAG,IAAA,mCAAgB,EAAC,IAAI,CAAC,CAAC;IAE7E,IAAI,KAAK,KAAK,SAAS;QAAE,OAAO;IAChC,IAAI,IAAI,CAAC,WAAW,GAAG,CAAC;QAAE,OAAO,KAAK,CAAC;IACvC,IAAI,OAAO,IAAI,KAAK,KAAK,YAAY;QAAE,OAAO,KAAK,CAAC;AACtD,CAAC;AARD,sCAQC","sourcesContent":["import { useFormikContext } from 'formik';\nimport { useMemoizedField } from './useMemoizedField';\n\n/**\n * Returns the field's error when there is one and when it should be visible.\n */\nexport function useFieldError(name: string): string | undefined {\n  const form = useFormikContext();\n\n  const [{ value }, { touched, error, initialValue }] = useMemoizedField(name);\n\n  if (error === undefined) return;\n  if (form.submitCount > 0) return error;\n  if (touched && value !== initialValue) return error;\n}\n"]}