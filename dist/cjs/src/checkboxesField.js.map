{"version":3,"file":"checkboxesField.js","sourceRoot":"","sources":["../../../src/checkboxesField.tsx"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,+CAAyC;AACzC,uDAA0E;AAC1E,uDAAwD;AACxD,mDAAgD;AAChD,yDAAsD;AAYtD;;;;;GAKG;AACH,SAAgB,eAAe,CAAI,KAA8B;IAC/D,MAAM,EAAE,IAAI,EAAE,GAAG,KAAK,CAAC;IAEvB,IAAA,qCAAmB,EAAC,IAAI,EAAE,iBAAiB,CAAC,CAAC;IAE7C,MAAM,CAAC,KAAK,EAAE,AAAD,EAAG,EAAE,QAAQ,EAAE,UAAU,EAAE,CAAC,GAAG,IAAA,mCAAgB,EAAM,IAAI,CAAC,CAAC;IACxE,MAAM,KAAK,GAAG,IAAA,6BAAa,EAAC,IAAI,CAAC,CAAC;IAElC,2CAA2C;IAC3C,IAAA,iBAAS,EAAC,GAAG,EAAE;QACb,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,KAAK,CAAC,EAAE;YAC/B,QAAQ,CAAC,EAAE,EAAE,KAAK,CAAC,CAAC;SACrB;IACH,CAAC,EAAE,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC;IAElB,OAAO,CACL,8BAAC,iCAAe,OACV,KAAK,EACT,KAAK,EAAE,KAAK,CAAC,KAAK,EAClB,QAAQ,EAAE,KAAK,CAAC,EAAE;YAChB,UAAU,CAAC,IAAI,CAAC,CAAC;YACjB,QAAQ,CAAC,KAAK,CAAC,CAAC;QAClB,CAAC,EACD,KAAK,EAAE,KAAK,GACZ,CACH,CAAC;AACJ,CAAC;AA1BD,0CA0BC","sourcesContent":["import React, { useEffect } from 'react';\nimport { CheckboxesInput, CheckboxesInputProps } from './checkboxesInput';\nimport { useConditionalField } from './conditionalForm';\nimport { useFieldError } from './useFieldError';\nimport { useMemoizedField } from './useMemoizedField';\n\nexport type CheckboxesFieldProps<T = any> = Omit<\n  CheckboxesInputProps<T>,\n  'name' | 'value' | 'onChange' | 'error'\n> & {\n  /**\n   * Field name\n   */\n  readonly name: string;\n};\n\n/**\n * A list of Material-UI checkboxes which toggle the values in\n * Formik field.\n *\n * Component ensures Formik value is always an array.\n */\nexport function CheckboxesField<T>(props: CheckboxesFieldProps<T>) {\n  const { name } = props;\n\n  useConditionalField(name, 'CheckboxesField');\n\n  const [field, , { setValue, setTouched }] = useMemoizedField<T[]>(name);\n  const error = useFieldError(name);\n\n  // Ensures Formik value is always an array.\n  useEffect(() => {\n    if (!Array.isArray(field.value)) {\n      setValue([], false);\n    }\n  }, [field.value]);\n\n  return (\n    <CheckboxesInput\n      {...props}\n      value={field.value}\n      onChange={value => {\n        setTouched(true);\n        setValue(value);\n      }}\n      error={error}\n    />\n  );\n}\n"]}