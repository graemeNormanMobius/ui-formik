{"version":3,"file":"switchInput.js","sourceRoot":"","sources":["../../../src/switchInput.tsx"],"names":[],"mappings":";;;;;;AAAA,4CAOuB;AACvB,kDAAyC;AAsCzC;;GAEG;AACH,SAAgB,WAAW,CAAC,KAAuB;IACjD,MAAM,QAAQ,GAAG,KAAK,CAAC,QAAQ,IAAI,KAAK,CAAC,KAAK,IAAI,IAAI,CAAC;IAEvD,OAAO,CACL,8BAAC,sBAAW,IAAC,KAAK,EAAE,KAAK,CAAC,KAAK,IAAI,IAAI;QACrC,8BAAC,2BAAgB,IACf,QAAQ,EAAE,QAAQ,EAClB,OAAO,EACL,8BAAC,iBAAM,IACL,OAAO,EAAE,KAAK,CAAC,KAAK,IAAI,KAAK,EAC7B,QAAQ,EAAE,QAAQ,EAClB,QAAQ,EAAE,CAAC,KAAK,EAAE,OAAO,EAAE,EAAE;oBAC3B,IAAI,KAAK,CAAC,KAAK,IAAI,IAAI;wBAAE,OAAO;oBAChC,KAAK,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC;oBACxB,KAAK,CAAC,WAAW,EAAE,QAAQ,EAAE,CAAC,KAAK,EAAE,OAAO,CAAC,CAAC;gBAChD,CAAC,KACG,KAAK,CAAC,WAAW,GACrB,EAEJ,KAAK,EAAE,KAAK,CAAC,KAAK,EAClB,cAAc,EAAC,OAAO,KAClB,KAAK,CAAC,UAAU,GACpB;QAED,CAAC,KAAK,CAAC,KAAK,IAAI,IAAI,IAAI,KAAK,CAAC,UAAU,IAAI,IAAI,CAAC,IAAI,CACpD,8BAAC,yBAAc,QAAE,KAAK,CAAC,KAAK,IAAI,KAAK,CAAC,UAAU,CAAkB,CACnE,CACW,CACf,CAAC;AACJ,CAAC;AA7BD,kCA6BC","sourcesContent":["import {\n  FormControl,\n  FormControlLabel,\n  FormControlLabelProps,\n  FormHelperText,\n  Switch,\n  SwitchProps\n} from '@mui/material';\nimport React, { ReactNode } from 'react';\n\nexport interface SwitchInputProps {\n  readonly label: FormControlLabelProps['label'];\n\n  /**\n   * Use `undefined` or `null` to move input into loading state.\n   */\n  readonly value: boolean | undefined | null;\n\n  readonly onChange: (value: boolean) => void;\n\n  /**\n   * Disabled by default if the value is `undefined` or `null`.\n   */\n  readonly disabled?: boolean;\n\n  /**\n   * MUI FormControlLabel props.\n   */\n  readonly labelProps?: Omit<FormControlLabelProps, 'control' | 'label'>;\n\n  /**\n   * MUI Switch props.\n   */\n  readonly switchProps?: Omit<SwitchProps, 'checked' | 'disabled'>;\n\n  /**\n   * Field error.\n   */\n  readonly error?: string;\n\n  /**\n   * The helper text content.\n   */\n  readonly helperText?: ReactNode;\n}\n\n/**\n * Switch with label and loading state.\n */\nexport function SwitchInput(props: SwitchInputProps) {\n  const disabled = props.disabled ?? props.value == null;\n\n  return (\n    <FormControl error={props.error != null}>\n      <FormControlLabel\n        disabled={disabled}\n        control={\n          <Switch\n            checked={props.value ?? false}\n            disabled={disabled}\n            onChange={(event, checked) => {\n              if (props.value == null) return;\n              props.onChange(checked);\n              props.switchProps?.onChange?.(event, checked);\n            }}\n            {...props.switchProps}\n          />\n        }\n        label={props.label}\n        labelPlacement=\"start\"\n        {...props.labelProps}\n      />\n\n      {(props.error != null || props.helperText != null) && (\n        <FormHelperText>{props.error ?? props.helperText}</FormHelperText>\n      )}\n    </FormControl>\n  );\n}\n"]}