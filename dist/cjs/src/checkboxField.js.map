{"version":3,"file":"checkboxField.js","sourceRoot":"","sources":["../../../src/checkboxField.tsx"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,+CAAoD;AACpD,mDAAoE;AACpE,uDAAwD;AACxD,mDAAgD;AAChD,yDAAsD;AAoBtD;;;;GAIG;AACH,SAAgB,aAAa,CAAC,KAAyB;IACrD,MAAM,EAAE,IAAI,EAAE,GAAG,KAAK,CAAC;IAEvB,IAAA,qCAAmB,EAAC,IAAI,EAAE,eAAe,CAAC,CAAC;IAE3C,MAAM,CAAC,KAAK,EAAE,AAAD,EAAG,EAAE,QAAQ,EAAE,UAAU,EAAE,CAAC,GAAG,IAAA,mCAAgB,EAAU,IAAI,CAAC,CAAC;IAC5E,MAAM,KAAK,GAAG,IAAA,6BAAa,EAAC,IAAI,CAAC,CAAC;IAElC,4CAA4C;IAC5C,IAAA,iBAAS,EAAC,GAAG,EAAE;QACb,IAAI,OAAO,KAAK,CAAC,KAAK,KAAK,SAAS,EAAE;YACpC,QAAQ,CAAC,KAAK,EAAE,KAAK,CAAC,CAAC;SACxB;IACH,CAAC,EAAE,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC;IAElB,OAAO,CACL,8BAAC,6BAAa,OACR,KAAK,EACT,KAAK,EAAE,KAAK,CAAC,KAAK,EAClB,QAAQ,EAAE,CAAC,KAAK,EAAE,KAAK,EAAE,EAAE;YACzB,UAAU,CAAC,IAAI,CAAC,CAAC;YACjB,QAAQ,CAAC,KAAK,CAAC,CAAC;QAClB,CAAC,EACD,KAAK,EAAE,KAAK,GACZ,CACH,CAAC;AACJ,CAAC;AA1BD,sCA0BC","sourcesContent":["import React, { ReactNode, useEffect } from 'react';\nimport { CheckboxInput, CheckboxInputProps } from './checkboxInput';\nimport { useConditionalField } from './conditionalForm';\nimport { useFieldError } from './useFieldError';\nimport { useMemoizedField } from './useMemoizedField';\n\nexport interface CheckboxFieldProps\n  extends Omit<CheckboxInputProps, 'value' | 'onChange' | 'error'> {\n  /**\n   * Name attribute of the `input` element.\n   */\n  readonly name: string;\n\n  /**\n   * The label content.\n   */\n  readonly label: ReactNode;\n\n  /**\n   * The helper text content.\n   */\n  readonly helperText?: ReactNode;\n}\n\n/**\n * Material-UI Checkbox with Formik support.\n *\n * Component ensures Formik value is always a boolean.\n */\nexport function CheckboxField(props: CheckboxFieldProps) {\n  const { name } = props;\n\n  useConditionalField(name, 'CheckboxField');\n\n  const [field, , { setValue, setTouched }] = useMemoizedField<boolean>(name);\n  const error = useFieldError(name);\n\n  // Ensures Formik value is always a boolean.\n  useEffect(() => {\n    if (typeof field.value !== 'boolean') {\n      setValue(false, false);\n    }\n  }, [field.value]);\n\n  return (\n    <CheckboxInput\n      {...props}\n      value={field.value}\n      onChange={(event, value) => {\n        setTouched(true);\n        setValue(value);\n      }}\n      error={error}\n    />\n  );\n}\n"]}