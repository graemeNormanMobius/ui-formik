{"version":3,"file":"multiAutocompleteInput.js","sourceRoot":"","sources":["../../../../src/autocomplete/multiAutocompleteInput.tsx"],"names":[],"mappings":"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","sourcesContent":["import { equals } from '@everlutionsk/helpers';\nimport { constants, useDelayedTrue, useLatestNonNilValue } from '@everlutionsk/ui';\nimport { Autocomplete, Chip, FilterOptionsState, TextField, TextFieldProps } from '@mui/material';\nimport React, { FocusEvent, ReactNode, useEffect, useMemo, useRef, useState } from 'react';\nimport { AutocompleteOption, LoadingSpinner, mergeOptions, normalizeLabel } from './common';\n\nexport interface MultiAutocompleteInputProps<Value, AllowCustom extends boolean | undefined> {\n  /**\n   * The label content.\n   */\n  readonly label?: ReactNode;\n\n  /**\n   * Available options for suggestion list.\n   */\n  readonly options: Array<AutocompleteOption<Value, AllowCustom>> | undefined;\n\n  /**\n   * A list of already selected options.\n   */\n  readonly selected: Array<AutocompleteOption<Value, AllowCustom>> | undefined;\n\n  /**\n   * Debounced callback which will be triggered when search term changes.\n   */\n  readonly onTermChange?: (term: string) => void;\n\n  /**\n   * Called when user selects option from suggestions list.\n   */\n  readonly onSelect: (option: AutocompleteOption<Value, AllowCustom>) => void;\n\n  /**\n   * Called when user removes already selected option.\n   */\n  readonly onRemove: (option: AutocompleteOption<Value, AllowCustom>) => void;\n\n  /**\n   * Called when user removes all selected options by clicking on X button.\n   */\n  readonly onClear?: () => void;\n\n  /**\n   * Allows user to add custom option when provided options are not enough.\n   *\n   * Renders `Add ${term}` at the end of the suggestion list.\n   *\n   * When set to TRUE, selected option may have no value, only label.\n   */\n  readonly allowCustom?: AllowCustom;\n\n  /**\n   * Renders error message when provided.\n   */\n  readonly error?: string;\n\n  /**\n   * If `true`, the `input` element will be focused during the first mount.\n   */\n  readonly autoFocus?: boolean;\n\n  readonly onBlur?: (event: FocusEvent<HTMLDivElement>) => void;\n  readonly placeholder?: string;\n  readonly disabled?: boolean;\n  readonly TextFieldProps?: TextFieldProps;\n  readonly filterOptions?: (\n    options: Array<AutocompleteOption<Value, AllowCustom>>,\n    state: FilterOptionsState<AutocompleteOption<Value, AllowCustom>>\n  ) => Array<AutocompleteOption<Value, AllowCustom>>;\n}\n\n/**\n * Autocomplete input with multi-selection support.\n *\n * To use it with Formik, please use MultiAutocompleteField.\n */\nexport function MultiAutocompleteInput<Value, AllowCustom extends boolean | undefined = undefined>(\n  props: MultiAutocompleteInputProps<Value, AllowCustom>\n) {\n  const [term, setTerm] = useState('');\n  const [hasFocus, setFocusState] = useState(false);\n  const [serveFromCache, setServeFromCache] = useState(false);\n\n  const cache = useRef(\n    new Map<string, Array<AutocompleteOption<Value, AllowCustom>> | undefined>()\n  );\n\n  useEffect(() => {\n    const timeout = setTimeout(() => {\n      props.onTermChange?.(term);\n      setServeFromCache(false);\n    }, constants.searchDebounce);\n    return () => clearTimeout(timeout);\n  }, [term]);\n\n  const selected = useLatestNonNilValue(props.selected);\n  const rawOptions = useLatestNonNilValue(serveFromCache ? cache.current.get(term) : props.options);\n  const loading = props.selected == null || props.options == null;\n  const showLoading = useDelayedTrue(hasFocus && loading, constants.loadingDelay);\n\n  const options = useMemo(\n    () =>\n      prepareOptions(\n        rawOptions ?? [],\n        selected ?? [],\n        term,\n        loading,\n        serveFromCache,\n        props.allowCustom\n      ),\n    [rawOptions, selected, term, loading, serveFromCache, props.allowCustom]\n  );\n\n  if (props.options != null) {\n    cache.current.set(term, props.options);\n  }\n\n  return (\n    <Autocomplete\n      options={options}\n      loading={showLoading}\n      onChange={(event, _, reason, details) => {\n        if (reason === 'clear') {\n          props.onClear?.();\n        }\n\n        const option = details?.option;\n        if (option == null) return;\n\n        if (reason === 'selectOption') {\n          if (option.label.trim() === '') return;\n\n          props.onSelect(option);\n          setTerm('');\n        }\n\n        if (reason === 'removeOption') {\n          props.onRemove(option);\n        }\n      }}\n      inputValue={term}\n      multiple\n      value={selected}\n      filterSelectedOptions\n      disabled={props.disabled}\n      onFocus={() => setFocusState(true)}\n      onBlur={event => {\n        cache.current.clear();\n        setFocusState(false);\n        props.onBlur?.(event);\n      }}\n      onInputChange={(_, value) => {\n        setServeFromCache(true);\n        setTerm(value);\n      }}\n      isOptionEqualToValue={(option, value) =>\n        equals(option.value, value.value) || option.label.trim() === value.label.trim()\n      }\n      getOptionLabel={({ label }) => label}\n      renderOption={(props, { label, value, node }) => {\n        if (value === undefined) return <li {...props}>Add \"{label}\"</li>;\n        return <li {...props}>{node ?? label}</li>;\n      }}\n      filterOptions={props.filterOptions}\n      getOptionDisabled={option => option.disabled ?? false}\n      renderTags={(options: Array<AutocompleteOption<Value, AllowCustom>>, getTagProps) =>\n        options.map((option, index) => {\n          const isCustomOption = props.allowCustom && option.value === undefined;\n          return (\n            <Chip\n              label={option.label}\n              color={isCustomOption ? 'secondary' : undefined}\n              {...getTagProps({ index })}\n            />\n          );\n        })\n      }\n      renderInput={params => (\n        <TextField\n          {...params}\n          type=\"text\"\n          label={props.label}\n          autoFocus={props.autoFocus}\n          error={props.error != null}\n          helperText={props.error}\n          InputProps={{\n            ...params.InputProps,\n            endAdornment: showLoading ? <LoadingSpinner /> : params.InputProps.endAdornment\n          }}\n          placeholder={props.placeholder}\n          {...props.TextFieldProps}\n        />\n      )}\n    />\n  );\n}\n\n/**\n * We need to merge available options with selected options\n * to avoid errors when selected options are missing from `options` list.\n *\n * Also, if `allowCustom` is enabled, we need to inject the custom option too.\n */\nfunction prepareOptions<Value, AllowCustom extends boolean | undefined>(\n  options: Array<AutocompleteOption<Value, AllowCustom>>,\n  selected: Array<AutocompleteOption<Value, AllowCustom>>,\n  term: string,\n  loading: boolean,\n  serveFromCache: boolean,\n  allowCustom: boolean | undefined\n) {\n  const all = mergeOptions(options, selected);\n\n  const normalizedTerm = normalizeLabel(term);\n  if (\n    !loading &&\n    !serveFromCache &&\n    allowCustom &&\n    normalizedTerm !== '' &&\n    all.every(({ label }) => normalizeLabel(label) !== normalizedTerm)\n  ) {\n    all.push({ label: term, value: undefined as any });\n  }\n\n  return all;\n}\n"]}