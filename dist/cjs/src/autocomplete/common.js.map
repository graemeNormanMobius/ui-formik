{"version":3,"file":"common.js","sourceRoot":"","sources":["../../../../src/autocomplete/common.tsx"],"names":[],"mappings":";;;;;;AAAA,mDAAqD;AACrD,4CAAiD;AACjD,kDAAyC;AAsBzC;;;GAGG;AACH,SAAgB,YAAY,CAC1B,OAAY,EACZ,QAAa;IAEb,MAAM,UAAU,GAAG,IAAI,GAAG,EAAa,CAAC;IACxC,OAAO,CAAC,GAAG,CAAC,MAAM,CAAC,EAAE,CAAC,UAAU,CAAC,GAAG,CAAC,MAAM,CAAC,KAAK,EAAE,MAAM,CAAC,CAAC,CAAC;IAE5D,IAAI,UAAU,CAAC,IAAI,KAAK,OAAO,CAAC,MAAM,EAAE;QACtC,OAAO,CAAC,IAAI,CAAC,4EAA4E,CAAC,CAAC;KAC5F;IAED,QAAQ,CAAC,GAAG,CAAC,MAAM,CAAC,EAAE,CAAC,UAAU,CAAC,GAAG,CAAC,MAAM,CAAC,KAAK,EAAE,MAAM,CAAC,CAAC,CAAC;IAE7D,OAAO,KAAK,CAAC,IAAI,CAAC,UAAU,CAAC,MAAM,EAAE,CAAC,CAAC;AACzC,CAAC;AAdD,oCAcC;AAED,SAAgB,cAAc;IAC5B,OAAO,8BAAC,2BAAgB,IAAC,IAAI,EAAE,EAAE,EAAE,SAAS,EAAC,8BAA8B,GAAG,CAAC;AACjF,CAAC;AAFD,wCAEC;AAED,SAAgB,cAAc,CAAC,KAAa;IAC1C,OAAO,IAAA,sBAAY,EAAC,KAAK,CAAC,IAAI,EAAE,CAAC,iBAAiB,EAAE,CAAC,CAAC;AACxD,CAAC;AAFD,wCAEC","sourcesContent":["import { removeAccent } from '@everlutionsk/helpers';\nimport { CircularProgress } from '@mui/material';\nimport React, { ReactNode } from 'react';\n\nexport interface AutocompleteOption<\n  Value = any,\n  AllowCustom extends boolean | undefined = undefined\n> {\n  /**\n   * Option label which will be used for autocomplete\n   */\n  readonly label: string;\n  readonly value: AllowCustom extends true ? Value | undefined : Value;\n\n  /**\n   * ReactNode which will be rendered.\n   *\n   * Fallbacks to `label` if not specified.\n   */\n  readonly node?: ReactNode;\n\n  readonly disabled?: boolean;\n}\n\n/**\n * We need to merge available options with selected options\n * to avoid errors when selected options are missing from `options` list.\n */\nexport function mergeOptions<T extends AutocompleteOption<any, any>>(\n  options: T[],\n  selected: T[]\n): T[] {\n  const optionsMap = new Map<string, T>();\n  options.map(option => optionsMap.set(option.label, option));\n\n  if (optionsMap.size !== options.length) {\n    console.warn(`Options in autocomplete input were reduced as they labels needs be unique!`);\n  }\n\n  selected.map(option => optionsMap.set(option.label, option));\n\n  return Array.from(optionsMap.values());\n}\n\nexport function LoadingSpinner() {\n  return <CircularProgress size={28} className=\"MuiAutocomplete-endAdornment\" />;\n}\n\nexport function normalizeLabel(label: string): string {\n  return removeAccent(label.trim().toLocaleLowerCase());\n}\n"]}