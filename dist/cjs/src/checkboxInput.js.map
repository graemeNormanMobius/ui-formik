{"version":3,"file":"checkboxInput.js","sourceRoot":"","sources":["../../../src/checkboxInput.tsx"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,4CAOuB;AACvB,+CAA+C;AA8B/C;;GAEG;AACU,QAAA,aAAa,GAAG,IAAA,YAAI,EAAC,CAAC,KAAyB,EAAE,EAAE;IAC9D,MAAM,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,UAAU,EAAE,UAAU,EAAE,GAAG,QAAQ,EAAE,GAAG,KAAK,CAAC;IAE3E,MAAM,eAAe,GAAG,KAAK,IAAI,KAAK,CAAC;IAEvC,OAAO,CACL,8BAAC,sBAAW,IAAC,KAAK,EAAE,KAAK,IAAI,IAAI;QAC/B,8BAAC,2BAAgB,IACf,KAAK,EAAE,KAAK,EACZ,OAAO,EACL,8BAAC,mBAAQ,OACH,QAAQ,EACZ,KAAK,EAAE,eAAe,EACtB,OAAO,EAAE,eAAe,EACxB,QAAQ,EAAE,CAAC,KAAK,EAAE,OAAO,EAAE,EAAE;oBAC3B,QAAQ,CAAC,QAAQ,EAAE,CAAC,KAAK,EAAE,OAAO,CAAC,CAAC;gBACtC,CAAC,EACD,MAAM,EAAE,KAAK,CAAC,EAAE;oBACd,QAAQ,CAAC,MAAM,EAAE,CAAC,KAAK,CAAC,CAAC;gBAC3B,CAAC,GACD,KAEA,UAAU,GACd;QAED,CAAC,KAAK,IAAI,IAAI,IAAI,UAAU,IAAI,IAAI,CAAC,IAAI,CACxC,8BAAC,yBAAc,QAAE,KAAK,IAAI,UAAU,CAAkB,CACvD,CACW,CACf,CAAC;AACJ,CAAC,CAAC,CAAC","sourcesContent":["import {\n  Checkbox,\n  CheckboxProps,\n  FormControl,\n  FormControlLabel,\n  FormControlLabelProps,\n  FormHelperText\n} from '@mui/material';\nimport React, { ReactNode, memo } from 'react';\n\nexport interface CheckboxInputProps\n  extends Omit<CheckboxProps, 'name' | 'error' | 'value' | 'checked'> {\n  /**\n   * The checkbox value.\n   */\n  readonly value: boolean;\n\n  /**\n   * The label content.\n   */\n  readonly label: ReactNode;\n\n  /**\n   * MUI FormControlLabel props.\n   */\n  readonly labelProps?: Omit<FormControlLabelProps, 'control' | 'label'>;\n\n  /**\n   * The helper text content.\n   */\n  readonly helperText?: ReactNode;\n\n  /**\n   * The error message.\n   */\n  readonly error?: string;\n}\n\n/**\n * Material-UI Checkbox with label and error helper text.\n */\nexport const CheckboxInput = memo((props: CheckboxInputProps) => {\n  const { value, error, label, helperText, labelProps, ...muiProps } = props;\n\n  const normalizedValue = value ?? false;\n\n  return (\n    <FormControl error={error != null}>\n      <FormControlLabel\n        label={label}\n        control={\n          <Checkbox\n            {...muiProps}\n            value={normalizedValue}\n            checked={normalizedValue}\n            onChange={(event, checked) => {\n              muiProps.onChange?.(event, checked);\n            }}\n            onBlur={event => {\n              muiProps.onBlur?.(event);\n            }}\n          />\n        }\n        {...labelProps}\n      />\n\n      {(error != null || helperText != null) && (\n        <FormHelperText>{error ?? helperText}</FormHelperText>\n      )}\n    </FormControl>\n  );\n});\n"]}