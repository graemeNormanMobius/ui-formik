{"version":3,"file":"passwordField.js","sourceRoot":"","sources":["../../../src/passwordField.tsx"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,wDAAgE;AAChE,4CAA+E;AAC/E,+CAAiD;AACjD,2CAAyE;AAIzE;;GAEG;AACH,SAAgB,aAAa,CAAC,KAAyB;IACrD,MAAM,CAAC,OAAO,EAAE,aAAa,CAAC,GAAG,IAAA,gBAAQ,EAAC,KAAK,CAAC,CAAC;IAEjD,MAAM,UAAU,GAAe,IAAA,eAAO,EACpC,GAAG,EAAE,CAAC,CAAC;QACL,YAAY,EAAE,CACZ,8BAAC,yBAAc,IAAC,QAAQ,EAAC,KAAK;YAC5B,8BAAC,qBAAU,IACT,OAAO,EAAE,GAAG,EAAE,CAAC,aAAa,CAAC,CAAC,OAAO,CAAC,gBAC1B,OAAO,CAAC,CAAC,CAAC,eAAe,CAAC,CAAC,CAAC,eAAe,EACvD,IAAI,EAAC,KAAK,EACV,QAAQ,EAAE,CAAC,CAAC,IAEX,OAAO,CAAC,CAAC,CAAC,8BAAC,8BAAa,OAAG,CAAC,CAAC,CAAC,8BAAC,2BAAU,OAAG,CAClC,CACE,CAClB;KACF,CAAC,EACF,CAAC,OAAO,CAAC,CACV,CAAC;IAEF,OAAO,CACL,8BAAC,SAAS,OACJ,KAAK,EACT,IAAI,EAAE,OAAO,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,UAAU,EACnC,cAAc,EAAE,cAAc,EAC9B,UAAU,EAAE,UAAU,EACtB,MAAM,EAAE,KAAK,CAAC,EAAE;YACd,aAAa,CAAC,KAAK,CAAC,CAAC;YACrB,KAAK,CAAC,MAAM,EAAE,CAAC,KAAK,CAAC,CAAC;QACxB,CAAC,EACD,SAAS,EAAE,KAAK,CAAC,EAAE;YACjB,IAAI,KAAK,CAAC,GAAG,KAAK,QAAQ,EAAE;gBAC1B,aAAa,CAAC,KAAK,CAAC,CAAC;aACtB;YACD,KAAK,CAAC,SAAS,EAAE,CAAC,KAAK,CAAC,CAAC;QAC3B,CAAC,GACD,CACH,CAAC;AACJ,CAAC;AAvCD,sCAuCC;AAED,MAAM,SAAS,GAAG,IAAA,iBAAM,EAAC,qBAAa,CAAC,CAAA;;;;;CAKtC,CAAC;AAEF,SAAS,cAAc,CAAC,KAAa;IACnC,OAAO,KAAK,CAAC;AACf,CAAC","sourcesContent":["import { Visibility, VisibilityOff } from '@mui/icons-material';\nimport { IconButton, InputAdornment, InputProps, styled } from '@mui/material';\nimport React, { useMemo, useState } from 'react';\nimport { TextField as BaseTextField, TextFieldProps } from './textField';\n\nexport type PasswordFieldProps = Omit<TextFieldProps, 'type' | 'InputProps'>;\n\n/**\n * TextField with \"password reveal\" button.\n */\nexport function PasswordField(props: PasswordFieldProps) {\n  const [visible, setVisibility] = useState(false);\n\n  const inputProps: InputProps = useMemo(\n    () => ({\n      endAdornment: (\n        <InputAdornment position=\"end\">\n          <IconButton\n            onClick={() => setVisibility(!visible)}\n            aria-label={visible ? 'Hide password' : 'Show password'}\n            edge=\"end\"\n            tabIndex={-1}\n          >\n            {visible ? <VisibilityOff /> : <Visibility />}\n          </IconButton>\n        </InputAdornment>\n      )\n    }),\n    [visible]\n  );\n\n  return (\n    <TextField\n      {...props}\n      type={visible ? 'text' : 'password'}\n      valueFormatter={valueFormatter}\n      InputProps={inputProps}\n      onBlur={event => {\n        setVisibility(false);\n        props.onBlur?.(event);\n      }}\n      onKeyDown={event => {\n        if (event.key === 'Escape') {\n          setVisibility(false);\n        }\n        props.onKeyDown?.(event);\n      }}\n    />\n  );\n}\n\nconst TextField = styled(BaseTextField)`\n  input::-ms-reveal,\n  input::-ms-clear {\n    display: none;\n  }\n`;\n\nfunction valueFormatter(value: string) {\n  return value;\n}\n"]}