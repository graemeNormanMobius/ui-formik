{"version":3,"file":"switchField.js","sourceRoot":"","sources":["../../../src/switchField.tsx"],"names":[],"mappings":";;;;;;AAAA,kDAA0B;AAC1B,uDAAwD;AACxD,+CAA8D;AAC9D,mDAAgD;AAChD,yDAAsD;AAStD;;GAEG;AACH,SAAgB,WAAW,CAAC,KAAuB;IACjD,MAAM,EAAE,IAAI,EAAE,GAAG,KAAK,CAAC;IAEvB,IAAA,qCAAmB,EAAC,KAAK,CAAC,IAAI,EAAE,aAAa,CAAC,CAAC;IAE/C,MAAM,CAAC,KAAK,EAAE,AAAD,EAAG,EAAE,QAAQ,EAAE,UAAU,EAAE,CAAC,GAAG,IAAA,mCAAgB,EAAU,IAAI,CAAC,CAAC;IAC5E,MAAM,KAAK,GAAG,IAAA,6BAAa,EAAC,IAAI,CAAC,CAAC;IAElC,OAAO,CACL,8BAAC,yBAAW,OACN,KAAK,EACT,KAAK,EAAE,KAAK,CAAC,KAAK,EAClB,QAAQ,EAAE,KAAK,CAAC,EAAE;YAChB,QAAQ,CAAC,KAAK,CAAC,CAAC;YAChB,UAAU,CAAC,IAAI,CAAC,CAAC;QACnB,CAAC,EACD,KAAK,EAAE,KAAK,GACZ,CACH,CAAC;AACJ,CAAC;AAnBD,kCAmBC","sourcesContent":["import React from 'react';\nimport { useConditionalField } from './conditionalForm';\nimport { SwitchInput, SwitchInputProps } from './switchInput';\nimport { useFieldError } from './useFieldError';\nimport { useMemoizedField } from './useMemoizedField';\n\nexport interface SwitchFieldProps extends Omit<SwitchInputProps, 'value' | 'onChange'> {\n  /**\n   * Field name\n   */\n  readonly name: string;\n}\n\n/**\n * Material-UI Switch with Formik support.\n */\nexport function SwitchField(props: SwitchFieldProps) {\n  const { name } = props;\n\n  useConditionalField(props.name, 'SwitchField');\n\n  const [field, , { setValue, setTouched }] = useMemoizedField<boolean>(name);\n  const error = useFieldError(name);\n\n  return (\n    <SwitchInput\n      {...props}\n      value={field.value}\n      onChange={value => {\n        setValue(value);\n        setTouched(true);\n      }}\n      error={error}\n    />\n  );\n}\n"]}