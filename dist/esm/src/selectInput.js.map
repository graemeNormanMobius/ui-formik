{"version":3,"file":"selectInput.js","sourceRoot":"","sources":["../../../src/selectInput.tsx"],"names":[],"mappings":"AAAA,OAAO,EAAE,MAAM,EAAE,MAAM,uBAAuB,CAAC;AAC/C,OAAO,EAAE,QAAQ,EAAiB,SAAS,EAAkB,MAAM,eAAe,CAAC;AACnF,OAAO,KAAK,EAAE,EAAE,IAAI,EAAa,OAAO,EAAE,MAAM,OAAO,CAAC;AAwCxD;;GAEG;AACH,MAAM,UAAU,WAAW,CAAI,KAA0B;IACvD,MAAM,EAAE,KAAK,EAAE,OAAO,EAAE,GAAG,SAAS,EAAE,GAAG,KAAK,CAAC;IAE/C,MAAM,UAAU,GAAG,OAAO,CAAC,GAAG,EAAE;QAC9B,OAAO,OAAO,CAAC,SAAS,CAAC,MAAM,CAAC,EAAE,CAAC,MAAM,CAAC,MAAM,CAAC,KAAK,EAAE,KAAK,CAAC,CAAC,CAAC;IAClE,CAAC,EAAE,CAAC,KAAK,EAAE,OAAO,CAAC,CAAC,CAAC;IAErB,OAAO,oBAAC,OAAO,IAAC,KAAK,EAAE,UAAU,EAAE,OAAO,EAAE,OAAO,KAAM,SAAS,GAAI,CAAC;AACzE,CAAC;AAMD,MAAM,OAAO,GAAG,IAAI,CAAC,CAAC,KAAmB,EAAE,EAAE;IAC3C,MAAM,EAAE,OAAO,EAAE,KAAK,EAAE,QAAQ,EAAE,KAAK,EAAE,GAAG,QAAQ,EAAE,GAAG,KAAK,CAAC;IAE/D,OAAO,CACL,oBAAC,SAAS,OACJ,QAAQ,EACZ,QAAQ,EAAE,KAAK,CAAC,EAAE;YAChB,MAAM,KAAK,GAAW,KAAK,CAAC,MAAM,CAAC,KAAY,CAAC;YAChD,QAAQ,CAAC,OAAO,CAAC,KAAK,CAAC,EAAE,KAAK,CAAC,CAAC;QAClC,CAAC,EACD,KAAK,EAAE,KAAK,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,KAAK,EAChC,MAAM,QACN,WAAW,EAAE;YACX,WAAW,EAAE,KAAK,CAAC,EAAE,CAAC,OAAO,CAAC,KAAe,CAAC,EAAE,KAAK,IAAI,EAAE;SAC5D,IAEA,OAAO,CAAC,GAAG,CAAC,CAAC,EAAE,KAAK,EAAE,KAAK,EAAE,IAAI,EAAE,GAAG,aAAa,EAAE,EAAE,CAAC,EAAE,EAAE,CAAC,CAC5D,oBAAC,QAAQ,IAAC,KAAK,EAAE,CAAC,EAAE,GAAG,EAAE,CAAC,EAAE,KAAK,EAAE,KAAK,KAAM,aAAa,IACxD,IAAI,IAAI,KAAK,CACL,CACZ,CAAC,CACQ,CACb,CAAC;AACJ,CAAC,CAAC,CAAC","sourcesContent":["import { equals } from '@everlutionsk/helpers';\nimport { MenuItem, MenuItemProps, TextField, TextFieldProps } from '@mui/material';\nimport React, { memo, ReactNode, useMemo } from 'react';\n\nexport type SelectInputProps<T = any> = Omit<\n  TextFieldProps,\n  'value' | 'onChange' | 'type' | 'select' | 'SelectProps' | 'placeholder'\n> & {\n  /**\n   * Selected value.\n   */\n  readonly value: T | undefined;\n\n  /**\n   * Called when user selects option from list.\n   */\n  readonly onChange: (value: T) => void;\n\n  /**\n   * Options to render.\n   */\n  readonly options: ReadonlyArray<SelectOption<T>>;\n\n  /**\n   * If `true`, compact vertical padding designed\n   * for keyboard and mouse input will be used for options.\n   */\n  readonly dense?: boolean;\n};\n\nexport interface SelectOption<T = any> extends Omit<MenuItemProps, 'value' | 'children'> {\n  readonly label: ReactNode;\n  readonly value: T;\n\n  /**\n   * ReactNode which will be rendered as menu option.\n   *\n   * Fallbacks to `label` if not specified.\n   */\n  readonly node?: ReactNode;\n}\n\n/**\n * Material-UI Select with better options support.\n */\nexport function SelectInput<T>(props: SelectInputProps<T>) {\n  const { value, options, ...restProps } = props;\n\n  const valueIndex = useMemo(() => {\n    return options.findIndex(option => equals(option.value, value));\n  }, [value, options]);\n\n  return <Control value={valueIndex} options={options} {...restProps} />;\n}\n\ninterface ControlProps extends Omit<SelectInputProps, 'value'> {\n  readonly value: number;\n}\n\nconst Control = memo((props: ControlProps) => {\n  const { options, value, onChange, dense, ...muiProps } = props;\n\n  return (\n    <TextField\n      {...muiProps}\n      onChange={event => {\n        const index: number = event.target.value as any;\n        onChange(options[index]?.value);\n      }}\n      value={value === -1 ? '' : value}\n      select\n      SelectProps={{\n        renderValue: index => options[index as number]?.label ?? ''\n      }}\n    >\n      {options.map(({ value, label, node, ...menuItemProps }, i) => (\n        <MenuItem value={i} key={i} dense={dense} {...menuItemProps}>\n          {node ?? label}\n        </MenuItem>\n      ))}\n    </TextField>\n  );\n});\n"]}