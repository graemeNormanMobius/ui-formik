{"version":3,"file":"radioInput.js","sourceRoot":"","sources":["../../../src/radioInput.tsx"],"names":[],"mappings":"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","sourcesContent":["import { equals } from '@everlutionsk/helpers';\nimport {\n  FormControl,\n  FormControlLabel,\n  FormHelperText,\n  FormLabel,\n  Radio,\n  RadioGroup,\n  RadioProps,\n  SxProps,\n  TextField,\n  TextFieldProps\n} from '@mui/material';\nimport React, { memo, ReactNode, useEffect, useMemo, useState } from 'react';\n\nexport interface RadioInputProps<T = any> {\n  /**\n   * Input name\n   */\n  readonly name?: string;\n\n  /**\n   * Selected value.\n   */\n  readonly value: T | undefined;\n\n  /**\n   * Called when user selects option.\n   */\n  readonly onChange: (value: T) => void;\n\n  readonly onBlur?: (e: React.FocusEvent<any>) => void;\n\n  readonly error?: string;\n\n  /**\n   * Options to render.\n   */\n  readonly options: ReadonlyArray<RadioInputOption<T>>;\n\n  /**\n   * The label content.\n   */\n  readonly label?: ReactNode;\n\n  /**\n   * The helper text content.\n   */\n  readonly helperText?: ReactNode;\n\n  /**\n   * Display options in a compact row.\n   */\n  readonly row?: boolean;\n\n  /**\n   * If `true`, all radio elements will be disabled.\n   */\n  readonly disabled?: boolean;\n\n  readonly className?: string;\n\n  /**\n   * SX for radio.\n   */\n  readonly sx?: SxProps;\n}\n\nexport interface RadioInputOption<T = any>\n  extends Omit<RadioProps, 'name' | 'checked' | 'children'> {\n  readonly label: ReactNode;\n  readonly value: T | ReturnType<typeof customRadioValue>;\n}\n\ntype RadioInput = <T>(props: RadioInputProps<T>) => ReactNode;\n\n/**\n * Material-UI Radio with better options support.\n */\nexport const RadioInput: RadioInput = memo(props => {\n  const isCustomSelected = useMemo(\n    () => props.options.every(({ value }) => value !== props.value),\n    [props.value, props.options]\n  );\n\n  useEffect(() => {\n    const custom = props.options.filter(({ value }) => isCustomRadioValue(value));\n    if (custom.length > 1) throw Error('RadioInput cannot have more than one custom value option!');\n  }, [props.options]);\n\n  const [customValue, setCustomValue] = useState<any>(() => {\n    if (isCustomSelected) return props.value;\n    return '';\n  });\n\n  return (\n    <FormControl component=\"fieldset\" className={props.className} error={props.error != null}>\n      {props.label && <FormLabel component=\"legend\">{props.label}</FormLabel>}\n\n      <RadioGroup row={props.row}>\n        {props.options.map(({ label, value, ...optionMuiProps }, i) => {\n          const isCustom = isCustomRadioValue(value);\n          const disabled = props.disabled ?? optionMuiProps.disabled;\n          const checked = isCustom ? isCustomSelected : equals(props.value, value);\n\n          const { __customRadioValue__, ...customValueProps } = isCustom ? value : ({} as any);\n\n          return (\n            <FormControlLabel\n              key={i}\n              label={\n                isCustom ? (\n                  <TextField\n                    size=\"small\"\n                    value={customValue}\n                    disabled={disabled}\n                    label={label}\n                    {...customValueProps}\n                    onChange={event => {\n                      const newValue: any = event.target.value;\n                      setCustomValue(newValue);\n                      props.onChange(newValue);\n                      customValueProps.onChange?.(event);\n                    }}\n                  />\n                ) : (\n                  label\n                )\n              }\n              control={\n                <Radio\n                  sx={props.sx}\n                  {...optionMuiProps}\n                  name={props.name}\n                  onChange={(event, checked) => {\n                    props.onChange(isCustom ? customValue : value);\n                    optionMuiProps.onChange?.(event, checked);\n                  }}\n                  checked={checked}\n                  onBlur={event => {\n                    props.onBlur?.(event);\n                    optionMuiProps.onBlur?.(event);\n                  }}\n                  disabled={disabled}\n                />\n              }\n            />\n          );\n        })}\n      </RadioGroup>\n\n      {(props.error != null || props.helperText != null) && (\n        <FormHelperText>{props.error ?? props.helperText}</FormHelperText>\n      )}\n    </FormControl>\n  );\n});\n\n/**\n * Creates custom radio value.\n *\n * RadioInput will render TextField which allows to enter custom value.\n */\nexport function customRadioValue(props: Omit<TextFieldProps, 'name' | 'label'>) {\n  return {\n    __customRadioValue__: true,\n    ...props\n  };\n}\n\nfunction isCustomRadioValue(value: any): value is ReturnType<typeof customRadioValue> {\n  return value && value.__customRadioValue__;\n}\n"]}