{"version":3,"file":"textField.js","sourceRoot":"","sources":["../../../src/textField.tsx"],"names":[],"mappings":"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","sourcesContent":["import { analyzeCharacter } from '@everlutionsk/invisible-characters';\nimport { TextField as MuiTextField, TextFieldProps as MuiTextFieldProps } from '@mui/material';\nimport React, { memo, useEffect, useMemo, useRef, useState } from 'react';\nimport { useConditionalField } from './conditionalForm';\nimport { useFieldError } from './useFieldError';\nimport { useMemoizedField } from './useMemoizedField';\n\nexport type TextFieldProps = Omit<\n  MuiTextFieldProps,\n  'name' | 'value' | 'error' | 'select' | 'SelectProps'\n> & {\n  /**\n   * Name attribute of the `input` element.\n   */\n  readonly name: string;\n\n  /**\n   * Allows to format the value before it is pushed into Formik.\n   *\n   * HTML input value will be replaced with a formatted value on each blur event.\n   *\n   * Default formatter trims string values and normalizes invisible characters.\n   *\n   * Default formatter is not used when input type is \"password\"\n   */\n  readonly valueFormatter?: (value: any) => any;\n};\n\n/**\n * Material-UI TextField with Formik support.\n *\n * Supports text, email, number, date, datetime-local, tel, etc.\n */\nexport function TextField(props: TextFieldProps) {\n  const { name, type } = props;\n\n  useConditionalField(name, 'TextField');\n\n  const error = useFieldError(name);\n  const [field, , { setValue }] = useMemoizedField(name);\n\n  const isDateInput =\n    type === 'date' || type === 'datetime-local' || type === 'month' || type === 'week';\n\n  if (isDateInput) {\n    return (\n      <DateControl\n        {...props}\n        fieldValue={field.value}\n        fieldOnBlur={field.onBlur}\n        setValue={setValue}\n        error={error}\n      />\n    );\n  }\n\n  return (\n    <Control\n      {...props}\n      fieldValue={field.value}\n      fieldOnBlur={field.onBlur}\n      setValue={setValue}\n      error={error}\n    />\n  );\n}\n\ninterface ControlProps extends TextFieldProps {\n  readonly fieldValue: any;\n  readonly fieldOnBlur: (e: React.FocusEvent<any>) => void;\n  readonly setValue: (value: any, shouldValidate?: boolean) => void;\n  readonly error: string | undefined;\n}\n\nconst Control = memo((props: ControlProps) => {\n  const { fieldValue, fieldOnBlur, setValue, error, valueFormatter, ...muiProps } = props;\n\n  const expectedFieldValue = useRef(fieldValue);\n  const [userValue, setUserValue] = useState(fieldValue ?? '');\n\n  // Update userValue when fieldValue is changed outside of the component.\n  useEffect(() => {\n    if (expectedFieldValue.current === fieldValue) return;\n    setUserValue(fieldValue);\n    expectedFieldValue.current = fieldValue;\n  }, [expectedFieldValue.current === fieldValue]);\n\n  return (\n    <MuiTextField\n      {...muiProps}\n      value={userValue}\n      onChange={event => {\n        const newValue = event.target.value;\n        setUserValue(newValue);\n\n        if (valueFormatter != null) {\n          const newFieldValue = valueFormatter(newValue);\n          setValue(newFieldValue);\n          expectedFieldValue.current = newFieldValue;\n        } else if (props.type !== 'password') {\n          const newFieldValue = defaultValueFormatter(newValue, props.multiline ?? false);\n          setValue(newFieldValue);\n          expectedFieldValue.current = newFieldValue;\n        } else {\n          setValue(newValue);\n          expectedFieldValue.current = newValue;\n        }\n\n        props.onChange?.(event);\n      }}\n      onBlur={event => {\n        if (userValue !== fieldValue) {\n          setUserValue(fieldValue ?? '');\n        }\n        fieldOnBlur(event);\n        props.onBlur?.(event);\n      }}\n      error={error != null}\n      helperText={error ?? props.helperText}\n    />\n  );\n});\n\nconst DateControl = memo((props: ControlProps) => {\n  const { fieldValue, fieldOnBlur, setValue, error, valueFormatter, ...muiProps } = props;\n\n  const value = useMemo(() => {\n    if (muiProps.type === 'month') {\n      return fieldValue ?? '';\n    }\n\n    if (muiProps.type === 'week') {\n      return fieldValue ?? '';\n    }\n\n    if (fieldValue == null) return '';\n    if (typeof fieldValue !== 'string' && !(fieldValue instanceof Date)) {\n      throw new Error(\n        `${muiProps.name}: ${fieldValue} is not supported! Field value needs to be a string or a Date.`\n      );\n    }\n\n    if (typeof fieldValue === 'string' && fieldValue.trim() === '') return '';\n\n    const date = fieldValue instanceof Date ? fieldValue : new Date(fieldValue);\n    if (date.toString() === 'Invalid Date') {\n      throw new Error(\n        `${muiProps.name}: ${fieldValue} is not a valid date! Field value needs to be a valid date.`\n      );\n    }\n\n    if (muiProps.type === 'date') {\n      const year = date.getUTCFullYear().toString().padStart(4, '0');\n      const month = (date.getUTCMonth() + 1).toString().padStart(2, '0');\n      const day = date.getUTCDate().toString().padStart(2, '0');\n      return `${year}-${month}-${day}`;\n    }\n\n    if (muiProps.type === 'datetime-local') {\n      const year = date.getFullYear().toString().padStart(4, '0');\n      const month = (date.getMonth() + 1).toString().padStart(2, '0');\n      const day = date.getDate().toString().padStart(2, '0');\n      const hour = date.getHours().toString().padStart(2, '0');\n      const minute = date.getMinutes().toString().padStart(2, '0');\n      return `${year}-${month}-${day}T${hour}:${minute}`;\n    }\n\n    throw Error(`${muiProps.name}: Unknown date type`);\n  }, [fieldValue, muiProps.type]);\n\n  const [focused, setFocused] = useState(false);\n\n  return (\n    <MuiTextField\n      {...muiProps}\n      value={value}\n      type={value === '' && !focused ? 'text' : muiProps.type}\n      onChange={event => {\n        const { value } = event.target;\n\n        if (muiProps.type === 'month' || muiProps.type === 'week') {\n          setValue(value);\n        } else if (value === '') {\n          setValue(null);\n        } else {\n          setValue(new Date(value).toISOString());\n        }\n\n        props.onChange?.(event);\n      }}\n      onBlur={event => {\n        setFocused(false);\n        fieldOnBlur(event);\n        props.onBlur?.(event);\n      }}\n      onFocus={event => {\n        setFocused(true);\n        props.onFocus?.(event);\n      }}\n      error={error != null}\n      helperText={error ?? props.helperText}\n    />\n  );\n});\n\nfunction defaultValueFormatter(value: any, allowMultiline: boolean) {\n  if (typeof value !== 'string') return value;\n\n  return value\n    .split('')\n    .map(char => {\n      if (char === '\\n') {\n        if (allowMultiline) return '\\n';\n        return ' ';\n      }\n\n      const { invisible, zeroSize } = analyzeCharacter(char);\n      if (zeroSize) return '';\n      if (invisible) return ' ';\n      return char;\n    })\n    .join('')\n    .trim();\n}\n"]}