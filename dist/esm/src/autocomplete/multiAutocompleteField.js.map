{"version":3,"file":"multiAutocompleteField.js","sourceRoot":"","sources":["../../../../src/autocomplete/multiAutocompleteField.tsx"],"names":[],"mappings":"AAAA,OAAO,EAAE,QAAQ,EAAE,MAAM,QAAQ,CAAC;AAClC,OAAO,KAAK,MAAM,OAAO,CAAC;AAC1B,OAAO,EAAE,aAAa,EAAE,MAAM,kBAAkB,CAAC;AAEjD,OAAO,EAAE,sBAAsB,EAA+B,MAAM,0BAA0B,CAAC;AAa/F;;;;GAIG;AACH,MAAM,UAAU,sBAAsB,CACpC,KAAqD;IAErD,MAAM,EAAE,IAAI,EAAE,GAAG,SAAS,EAAE,GAAG,KAAK,CAAC;IACrC,MAAM,CAAC,KAAK,EAAE,AAAD,EAAG,EAAE,QAAQ,EAAE,UAAU,EAAE,CAAC,GAAG,QAAQ,CAElD,IAAI,CAAC,CAAC;IACR,MAAM,KAAK,GAAG,aAAa,CAAC,IAAI,CAAC,CAAC;IAClC,MAAM,KAAK,GAAG,KAAK,CAAC,KAAK,IAAI,EAAE,CAAC;IAEhC,OAAO,CACL,oBAAC,sBAAsB,OACjB,SAAS,EACb,KAAK,EAAE,KAAK,EACZ,QAAQ,EAAE,KAAK,CAAC,KAAK,EACrB,QAAQ,EAAE,MAAM,CAAC,EAAE,CAAC,QAAQ,CAAC,CAAC,GAAG,KAAK,EAAE,MAAM,CAAC,CAAC,EAChD,QAAQ,EAAE,MAAM,CAAC,EAAE,CAAC,QAAQ,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,EAAE,KAAK,EAAE,EAAE,EAAE,CAAC,KAAK,KAAK,MAAM,CAAC,KAAK,CAAC,CAAC,EACjF,MAAM,EAAE,KAAK,CAAC,EAAE;YACd,UAAU,CAAC,IAAI,CAAC,CAAC;YACjB,KAAK,CAAC,MAAM,EAAE,CAAC,KAAK,CAAC,CAAC;QACxB,CAAC,EACD,OAAO,EAAE,GAAG,EAAE,CAAC,QAAQ,CAAC,EAAE,CAAC,GAC3B,CACH,CAAC;AACJ,CAAC","sourcesContent":["import { useField } from 'formik';\nimport React from 'react';\nimport { useFieldError } from '../useFieldError';\nimport { AutocompleteOption } from './common';\nimport { MultiAutocompleteInput, MultiAutocompleteInputProps } from './multiAutocompleteInput';\n\nexport interface MultiAutocompleteFieldPops<Value, AllowCustom extends boolean | undefined>\n  extends Omit<\n    MultiAutocompleteInputProps<Value, AllowCustom>,\n    'error' | 'selected' | 'onSelect' | 'onRemove' | 'onClear'\n  > {\n  /**\n   * Field name.\n   */\n  readonly name: string;\n}\n\n/**\n * Autocomplete field with multi-selection support.\n *\n * To use it without Formik, please use MultiAutocompleteInput\n */\nexport function MultiAutocompleteField<Value, AllowCustom extends boolean | undefined>(\n  props: MultiAutocompleteFieldPops<Value, AllowCustom>\n) {\n  const { name, ...restProps } = props;\n  const [field, , { setValue, setTouched }] = useField<\n    Array<AutocompleteOption<Value, AllowCustom>> | undefined\n  >(name);\n  const error = useFieldError(name);\n  const value = field.value ?? [];\n\n  return (\n    <MultiAutocompleteInput\n      {...restProps}\n      error={error}\n      selected={field.value}\n      onSelect={option => setValue([...value, option])}\n      onRemove={option => setValue(value.filter(({ label }) => label !== option.label))}\n      onBlur={event => {\n        setTouched(true);\n        props.onBlur?.(event);\n      }}\n      onClear={() => setValue([])}\n    />\n  );\n}\n"]}