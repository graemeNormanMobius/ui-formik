{"version":3,"file":"autocompleteField.js","sourceRoot":"","sources":["../../../../src/autocomplete/autocompleteField.tsx"],"names":[],"mappings":"AAAA,OAAO,EAAE,QAAQ,EAAE,MAAM,QAAQ,CAAC;AAClC,OAAO,KAAK,MAAM,OAAO,CAAC;AAC1B,OAAO,EAAE,aAAa,EAAE,MAAM,kBAAkB,CAAC;AACjD,OAAO,EAAE,iBAAiB,EAA0B,MAAM,qBAAqB,CAAC;AAWhF;;;;GAIG;AACH,MAAM,UAAU,iBAAiB,CAC/B,KAAgD;IAEhD,MAAM,EAAE,IAAI,EAAE,GAAG,SAAS,EAAE,GAAG,KAAK,CAAC;IACrC,MAAM,CAAC,KAAK,EAAE,AAAD,EAAG,EAAE,QAAQ,EAAE,UAAU,EAAE,CAAC,GAAG,QAAQ,CAElD,IAAI,CAAC,CAAC;IACR,MAAM,KAAK,GAAG,aAAa,CAAC,IAAI,CAAC,CAAC;IAElC,OAAO,CACL,oBAAC,iBAAiB,OACZ,SAAS,EACb,KAAK,EAAE,KAAK,EACZ,QAAQ,EAAE,KAAK,CAAC,KAAK,EACrB,QAAQ,EAAE,QAAQ,EAClB,MAAM,EAAE,KAAK,CAAC,EAAE;YACd,UAAU,CAAC,IAAI,CAAC,CAAC;YACjB,KAAK,CAAC,MAAM,EAAE,CAAC,KAAK,CAAC,CAAC;QACxB,CAAC,GACD,CACH,CAAC;AACJ,CAAC","sourcesContent":["import { useField } from 'formik';\nimport React from 'react';\nimport { useFieldError } from '../useFieldError';\nimport { AutocompleteInput, AutocompleteInputProps } from './autocompleteInput';\nimport { AutocompleteOption } from './common';\n\nexport interface AutocompleteFieldPops<Value, AllowCustom extends boolean | undefined>\n  extends Omit<AutocompleteInputProps<Value, AllowCustom>, 'error' | 'selected' | 'onSelect'> {\n  /**\n   * Field name.\n   */\n  readonly name: string;\n}\n\n/**\n * Autocomplete field.\n *\n * To use it without Formik, please use AutocompleteInput.\n */\nexport function AutocompleteField<Value, AllowCustom extends boolean | undefined>(\n  props: AutocompleteFieldPops<Value, AllowCustom>\n) {\n  const { name, ...restProps } = props;\n  const [field, , { setValue, setTouched }] = useField<\n    AutocompleteOption<Value, AllowCustom> | undefined\n  >(name);\n  const error = useFieldError(name);\n\n  return (\n    <AutocompleteInput\n      {...restProps}\n      error={error}\n      selected={field.value}\n      onSelect={setValue}\n      onBlur={event => {\n        setTouched(true);\n        props.onBlur?.(event);\n      }}\n    />\n  );\n}\n"]}