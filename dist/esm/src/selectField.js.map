{"version":3,"file":"selectField.js","sourceRoot":"","sources":["../../../src/selectField.tsx"],"names":[],"mappings":"AAAA,OAAO,KAAK,MAAM,OAAO,CAAC;AAC1B,OAAO,EAAE,mBAAmB,EAAE,MAAM,mBAAmB,CAAC;AACxD,OAAO,EAAE,WAAW,EAAoB,MAAM,eAAe,CAAC;AAC9D,OAAO,EAAE,aAAa,EAAE,MAAM,iBAAiB,CAAC;AAChD,OAAO,EAAE,gBAAgB,EAAE,MAAM,oBAAoB,CAAC;AAYtD;;GAEG;AACH,MAAM,UAAU,WAAW,CAAI,KAA0B;IACvD,MAAM,EAAE,IAAI,EAAE,GAAG,KAAK,CAAC;IAEvB,mBAAmB,CAAC,KAAK,CAAC,IAAI,EAAE,aAAa,CAAC,CAAC;IAE/C,MAAM,CAAC,KAAK,EAAE,AAAD,EAAG,EAAE,QAAQ,EAAE,UAAU,EAAE,CAAC,GAAG,gBAAgB,CAAC,IAAI,CAAC,CAAC;IACnE,MAAM,KAAK,GAAG,aAAa,CAAC,IAAI,CAAC,CAAC;IAElC,OAAO,CACL,oBAAC,WAAW,OACN,KAAK,EACT,KAAK,EAAE,KAAK,CAAC,KAAK,EAClB,QAAQ,EAAE,QAAQ,EAClB,MAAM,EAAE,KAAK,CAAC,EAAE;YACd,UAAU,CAAC,IAAI,CAAC,CAAC;YACjB,KAAK,CAAC,MAAM,EAAE,CAAC,KAAK,CAAC,CAAC;QACxB,CAAC,EACD,KAAK,EAAE,KAAK,IAAI,IAAI,EACpB,UAAU,EAAE,KAAK,IAAI,KAAK,CAAC,UAAU,GACrC,CACH,CAAC;AACJ,CAAC","sourcesContent":["import React from 'react';\nimport { useConditionalField } from './conditionalForm';\nimport { SelectInput, SelectInputProps } from './selectInput';\nimport { useFieldError } from './useFieldError';\nimport { useMemoizedField } from './useMemoizedField';\n\nexport type SelectFieldProps<T = any> = Omit<\n  SelectInputProps<T>,\n  'name' | 'value' | 'onChange' | 'error'\n> & {\n  /**\n   * Field name\n   */\n  readonly name: string;\n};\n\n/**\n * Material-UI Select with Formik support.\n */\nexport function SelectField<T>(props: SelectFieldProps<T>) {\n  const { name } = props;\n\n  useConditionalField(props.name, 'SelectField');\n\n  const [field, , { setValue, setTouched }] = useMemoizedField(name);\n  const error = useFieldError(name);\n\n  return (\n    <SelectInput\n      {...props}\n      value={field.value}\n      onChange={setValue}\n      onBlur={event => {\n        setTouched(true);\n        props.onBlur?.(event);\n      }}\n      error={error != null}\n      helperText={error ?? props.helperText}\n    />\n  );\n}\n"]}