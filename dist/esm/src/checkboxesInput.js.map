{"version":3,"file":"checkboxesInput.js","sourceRoot":"","sources":["../../../src/checkboxesInput.tsx"],"names":[],"mappings":"AAAA,OAAO,EAAE,QAAQ,EAAE,MAAM,uBAAuB,CAAC;AACjD,OAAO,EACL,QAAQ,EAER,WAAW,EACX,gBAAgB,EAChB,SAAS,IAAI,YAAY,EACzB,cAAc,EACd,SAAS,EACT,MAAM,EACP,MAAM,eAAe,CAAC;AACvB,OAAO,KAAK,EAAE,EAAE,IAAI,EAAa,MAAM,OAAO,CAAC;AA0D/C;;GAEG;AACH,MAAM,CAAC,MAAM,eAAe,GAAoB,IAAI,CAAC,KAAK,CAAC,EAAE;IAC3D,OAAO,CACL,oBAAC,WAAW,IAAC,SAAS,EAAC,UAAU,EAAC,SAAS,EAAE,KAAK,CAAC,SAAS,EAAE,KAAK,EAAE,KAAK,CAAC,KAAK,IAAI,IAAI;QACrF,KAAK,CAAC,KAAK,IAAI,oBAAC,SAAS,IAAC,SAAS,EAAC,QAAQ,IAAE,KAAK,CAAC,KAAK,CAAa;QAEvE,oBAAC,SAAS,IAAC,GAAG,EAAE,KAAK,CAAC,GAAG,IACtB,KAAK,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC,EAAE,KAAK,EAAE,KAAK,EAAE,GAAG,cAAc,EAAE,EAAE,CAAC,EAAE,EAAE,CAAC,CAC7D,oBAAC,gBAAgB,IACf,GAAG,EAAE,CAAC,EACN,KAAK,EAAE,KAAK,EACZ,OAAO,EACL,oBAAC,QAAQ,OACH,cAAc,EAClB,IAAI,EAAE,KAAK,CAAC,IAAI,EAChB,QAAQ,EAAE,CAAC,KAAK,EAAE,OAAO,EAAE,EAAE;oBAC3B,MAAM,OAAO,GAAG,QAAQ,CAAC,KAAK,CAAC,KAAK,IAAI,EAAE,EAAE,KAAK,CAAC,CAAC;oBACnD,KAAK,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC;oBACxB,cAAc,CAAC,QAAQ,EAAE,CAAC,KAAK,EAAE,OAAO,CAAC,CAAC;gBAC5C,CAAC,EACD,OAAO,EAAE,CAAC,KAAK,CAAC,KAAK,IAAI,EAAE,CAAC,CAAC,QAAQ,CAAC,KAAK,CAAC,EAC5C,MAAM,EAAE,KAAK,CAAC,EAAE;oBACd,KAAK,CAAC,MAAM,EAAE,CAAC,KAAK,CAAC,CAAC;oBACtB,cAAc,CAAC,MAAM,EAAE,CAAC,KAAK,CAAC,CAAC;gBACjC,CAAC,EACD,QAAQ,EAAE,KAAK,CAAC,QAAQ,IAAI,cAAc,CAAC,QAAQ,GACnD,GAEJ,CACH,CAAC,CACQ;QAEX,CAAC,KAAK,CAAC,KAAK,IAAI,IAAI,IAAI,KAAK,CAAC,UAAU,IAAI,IAAI,CAAC,IAAI,CACpD,oBAAC,cAAc,QAAE,KAAK,CAAC,KAAK,IAAI,KAAK,CAAC,UAAU,CAAkB,CACnE,CACW,CACf,CAAC;AACJ,CAAC,CAAC,CAAC;AAEH,MAAM,SAAS,GAAG,MAAM,CAAC,YAAY,CAAC,CAAA;;;;;;;CAOrC,CAAC","sourcesContent":["import { toggleIn } from '@everlutionsk/helpers';\nimport {\n  Checkbox,\n  CheckboxProps,\n  FormControl,\n  FormControlLabel,\n  FormGroup as MuiFormGroup,\n  FormHelperText,\n  FormLabel,\n  styled\n} from '@mui/material';\nimport React, { memo, ReactNode } from 'react';\n\nexport interface CheckboxesInputProps<T = any> {\n  /**\n   * Input name.\n   */\n  readonly name?: string;\n\n  /**\n   * Selected values.\n   */\n  readonly value: T[];\n\n  /**\n   * Called when user toggles option.\n   */\n  readonly onChange: (value: T[]) => void;\n\n  readonly onBlur?: (e: React.FocusEvent<any>) => void;\n\n  readonly error?: string;\n\n  /**\n   * Options to render.\n   */\n  readonly options: ReadonlyArray<CheckboxesInputOption<T>>;\n\n  /**\n   * The label content.\n   */\n  readonly label?: ReactNode;\n\n  /**\n   * The helper text content.\n   */\n  readonly helperText?: ReactNode;\n\n  /**\n   * Display options in a compact row.\n   */\n  readonly row?: boolean;\n\n  /**\n   * If `true`, all checkbox elements will be disabled.\n   */\n  readonly disabled?: boolean;\n\n  readonly className?: string;\n}\n\nexport interface CheckboxesInputOption<T = any>\n  extends Omit<CheckboxProps, 'name' | 'checked' | 'children'> {\n  readonly label: ReactNode;\n  readonly value: T;\n}\n\ntype CheckboxesInput = <T>(props: CheckboxesInputProps<T>) => ReactNode;\n\n/**\n * Material-UI checkboxes with shared array value.\n */\nexport const CheckboxesInput: CheckboxesInput = memo(props => {\n  return (\n    <FormControl component=\"fieldset\" className={props.className} error={props.error != null}>\n      {props.label && <FormLabel component=\"legend\">{props.label}</FormLabel>}\n\n      <FormGroup row={props.row}>\n        {props.options.map(({ label, value, ...optionMuiProps }, i) => (\n          <FormControlLabel\n            key={i}\n            label={label}\n            control={\n              <Checkbox\n                {...optionMuiProps}\n                name={props.name}\n                onChange={(event, checked) => {\n                  const updated = toggleIn(props.value ?? [], value);\n                  props.onChange(updated);\n                  optionMuiProps.onChange?.(event, checked);\n                }}\n                checked={(props.value ?? []).includes(value)}\n                onBlur={event => {\n                  props.onBlur?.(event);\n                  optionMuiProps.onBlur?.(event);\n                }}\n                disabled={props.disabled ?? optionMuiProps.disabled}\n              />\n            }\n          />\n        ))}\n      </FormGroup>\n\n      {(props.error != null || props.helperText != null) && (\n        <FormHelperText>{props.error ?? props.helperText}</FormHelperText>\n      )}\n    </FormControl>\n  );\n});\n\nconst FormGroup = styled(MuiFormGroup)`\n  &.row {\n    flex-direction: row;\n  }\n  &.column {\n    flex-direction: column;\n  }\n`;\n"]}