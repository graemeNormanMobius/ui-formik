{"version":3,"file":"conditionalForm.js","sourceRoot":"","sources":["../../../src/conditionalForm.tsx"],"names":[],"mappings":"AAAA,OAAO,EAAE,IAAI,EAAE,QAAQ,EAAE,MAAM,QAAQ,CAAC;AACxC,OAAO,KAAK,EAAE,EAAE,aAAa,EAAa,UAAU,EAAE,SAAS,EAAE,MAAM,EAAE,MAAM,OAAO,CAAC;AAEvF,MAAM,UAAU,GAAG,aAAa,CAAC;AAEjC;;;;GAIG;AACH,MAAM,UAAU,eAAe,CAAC,EAAE,QAAQ,EAA2B;IACnE,MAAM,IAAI,GAAG,MAAM,CAAC,EAAE,CAAC,UAAU,CAAC,EAAE,IAAI,EAAE,CAAC,CAAC;IAE5C,SAAS,CAAC,GAAG,EAAE;QACb,OAAO,GAAG,EAAE;YACV,IAAI,CAAC,OAAO,CAAC,UAAU,CAAC,GAAG,KAAK,CAAC;QACnC,CAAC,CAAC;IACJ,CAAC,CAAC,CAAC;IAEH,OAAO,CACL,oBAAC,QAAQ,IAAC,KAAK,EAAE,IAAI,CAAC,OAAO;QAC3B,oBAAC,IAAI,QAAE,QAAQ,CAAQ,CACd,CACZ,CAAC;AACJ,CAAC;AAED;;;;;;;;;;;GAWG;AACH,MAAM,UAAU,mBAAmB,CAAC,IAAY,EAAE,IAAY;IAC5D,MAAM,GAAG,GAAG,GAAG,IAAI,IAAI,IAAI,EAAE,CAAC;IAE9B,MAAM,CAAC,EAAE,KAAK,EAAE,EAAE,EAAE,YAAY,EAAE,EAAE,EAAE,QAAQ,EAAE,CAAC,GAAG,QAAQ,CAAC,IAAI,CAAC,CAAC;IACnE,MAAM,IAAI,GAAG,UAAU,CAAC,OAAO,CAAC,CAAC;IACjC,MAAM,YAAY,GAAG,MAAM,CAAC,IAAI,CAAC,CAAC;IAClC,MAAM,gBAAgB,GAAG,IAAI,KAAK,SAAS,CAAC;IAE5C,IAAI,CAAC,gBAAgB,EAAE;QACrB,IAAI,IAAI,CAAC,GAAG,CAAC,KAAK,SAAS,EAAE;YAC3B,IAAI,CAAC,GAAG,CAAC,GAAG,EAAE,KAAK,EAAE,CAAC;SACvB;aAAM,IAAI,CAAC,YAAY,CAAC,OAAO,EAAE;YAChC,IAAI,CAAC,GAAG,CAAC,CAAC,KAAK,GAAG,KAAK,CAAC;SACzB;KACF;IAED,SAAS,CAAC,GAAG,EAAE;QACb,IAAI,gBAAgB;YAAE,OAAO;QAE7B,IAAI,IAAI,CAAC,GAAG,CAAC,CAAC,KAAK,KAAK,YAAY,EAAE;YACpC,QAAQ,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,KAAK,CAAC,CAAC;SAC3B;QAED,YAAY,CAAC,OAAO,GAAG,KAAK,CAAC;QAE7B,OAAO,GAAG,EAAE;YACV,4DAA4D;YAC5D,wCAAwC;YACxC,UAAU,CAAC,GAAG,EAAE;gBACd,IAAI,IAAI,CAAC,UAAU,CAAC,KAAK,IAAI;oBAAE,QAAQ,CAAC,YAAY,CAAC,CAAC;YACxD,CAAC,EAAE,CAAC,CAAC,CAAC;QACR,CAAC,CAAC;IACJ,CAAC,EAAE,EAAE,CAAC,CAAC;AACT,CAAC;AAED,MAAM,OAAO,GAAG,aAAa,CAAM,SAAS,CAAC,CAAC;AAC9C,OAAO,CAAC,WAAW,GAAG,wBAAwB,CAAC;AAC/C,MAAM,EAAE,QAAQ,EAAE,GAAG,OAAO,CAAC","sourcesContent":["import { Form, useField } from 'formik';\nimport React, { createContext, ReactNode, useContext, useEffect, useRef } from 'react';\n\nconst mountedKey = '__mounted__';\n\n/**\n * A drop-in replacement for formik's <Form />.\n *\n * Provides support for `useConditionalField` hook.\n */\nexport function ConditionalForm({ children }: { children: ReactNode }) {\n  const data = useRef({ [mountedKey]: true });\n\n  useEffect(() => {\n    return () => {\n      data.current[mountedKey] = false;\n    };\n  });\n\n  return (\n    <Provider value={data.current}>\n      <Form>{children}</Form>\n    </Provider>\n  );\n}\n\n/**\n * Stores field's current value in context and reverts it to initialValue\n * when field is removed from DOM.\n *\n * Also, when field re-appears in DOM, it's value is automatically restored.\n *\n * With this, one can render fields conditionally without worrying, that\n * removed field will affect form values.\n *\n * @param name Field name\n * @param type Field type (example: InputField)\n */\nexport function useConditionalField(name: string, type: string): void {\n  const key = `${name}|${type}`;\n\n  const [{ value }, { initialValue }, { setValue }] = useField(name);\n  const data = useContext(context);\n  const initializing = useRef(true);\n  const isNotConditional = data === undefined;\n\n  if (!isNotConditional) {\n    if (data[key] === undefined) {\n      data[key] = { value };\n    } else if (!initializing.current) {\n      data[key].value = value;\n    }\n  }\n\n  useEffect(() => {\n    if (isNotConditional) return;\n\n    if (data[key].value !== initialValue) {\n      setValue(data[key].value);\n    }\n\n    initializing.current = false;\n\n    return () => {\n      // We need to fire the update in the next tick as otherwise,\n      // Formik merges it's state incorrectly.\n      setTimeout(() => {\n        if (data[mountedKey] === true) setValue(initialValue);\n      }, 0);\n    };\n  }, []);\n}\n\nconst context = createContext<any>(undefined);\ncontext.displayName = 'ConditionalFormContext';\nconst { Provider } = context;\n"]}